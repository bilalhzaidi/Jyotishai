generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For credentials auth
  role          UserRole  @default(USER)
  
  // Profile information
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  dateOfBirth   DateTime? @map("date_of_birth")
  timeOfBirth   String?   @map("time_of_birth")
  placeOfBirth  String?   @map("place_of_birth")
  gender        Gender?
  
  // Subscription information
  subscriptionId       String?           @unique @map("subscription_id")
  subscriptionStatus   SubscriptionStatus @default(INACTIVE) @map("subscription_status")
  subscriptionPlan     SubscriptionPlan? @map("subscription_plan")
  subscriptionStart    DateTime?         @map("subscription_start")
  subscriptionEnd      DateTime?         @map("subscription_end")
  
  // Usage tracking
  reportsGenerated     Int               @default(0) @map("reports_generated")
  reportsLimit         Int               @default(0) @map("reports_limit")
  
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  reports       Report[]
  payments      Payment[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Report {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  
  // Birth data
  birthDate   DateTime    @map("birth_date")
  birthTime   String      @map("birth_time")
  birthPlace  String      @map("birth_place")
  gender      Gender
  
  // Report content
  reportType  ReportType  @map("report_type")
  content     Json
  
  // Metadata
  generatedAt DateTime    @default(now()) @map("generated_at")
  isPublic    Boolean     @default(false) @map("is_public")
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reports")
}

model Payment {
  id                String        @id @default(cuid())
  userId            String        @map("user_id")
  
  // Payment details
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("ZAR")
  status            PaymentStatus @default(PENDING)
  
  // Payment processor details
  processor         String        // "payfast" or "stripe"
  processorPaymentId String?      @map("processor_payment_id")
  
  // Subscription details
  subscriptionPlan  SubscriptionPlan @map("subscription_plan")
  billingPeriod     BillingPeriod    @map("billing_period")
  
  // Metadata
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("system_settings")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum SubscriptionPlan {
  BASIC
  PRO
  PREMIUM
}

enum BillingPeriod {
  MONTHLY
  YEARLY
}

enum ReportType {
  PERSONALITY
  COMPATIBILITY
  CAREER
  HEALTH
  MARRIAGE
  SPIRITUALITY
  FULL_READING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}